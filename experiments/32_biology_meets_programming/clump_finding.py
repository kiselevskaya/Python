

import unittest
from pattern_count import frequency_map
from pattern_matching import *


def clump_finding(genome, k, l, t):
    freq_map = frequency_map(genome, k)
    words = []
    for key in freq_map:
        if freq_map[key] >= t:
            words.append(key)
    output = []
    for pattern in words:
        match = pattern_matching(pattern, genome)
        for i in range(len(match)):
            try:
                last_index_l = i+t-1
                if match[last_index_l]+k-1 <= match[i]+l-1:
                    output.append(pattern)
                    break
            except Exception as e:
                print(e)
                break
    return output


class TestClumpFinding(unittest.TestCase):

    def test_clump_finding_0(self):
        genome = 'CGGACTCGACAGATGTGAAGAACGACAATGTGAAGACTCGACACGACAGAGTGAAGAGAAGAGGAAACATTGTAA'
        k, l, t = 5, 50, 4
        output = 'CGACA GAAGA'
        self.assertEqual(' '.join(clump_finding(genome, k, l, t)), output)

    def test_clump_finding_1(self):
        genome = 'GCGGTTATGCACCGTTCAAATTAGCAAACCACTAAGCGACGTAGTCTGGATTGATTTCTCCCTACCAGTGACCCAAGACGCGTTAGTGAGTTAAGTTCATATCCAGTACCTGCCGCCCTCTGTACTTGGGCGTCCGATTCGCATGCTTACTCAGGTGGAGGACACGATAATCTGATTAAACTGAGCTAAACCAGGTGGAACCAGAAACCAGGTGGGGAGTCTCGCTTCAAGCCGTTCTTGCGATCAAACCAGGTGGTCCATTATGAAACCAGGTGGCTAAACCAGGTGGTCCAGATCCTCGAATGATGTCGGTGCACATCAAAACCAGGTGGGGTGGTGGAACGTAAAACCAGGTGGCATAAACCAGGTGGGCCGGTTCGTAAACCAGGTGAAACCAGGTGGGGTGGAAACCAGGTGGGTTACAAATTACGTTGAGATGGCCCAAACCAGGTGGTGGGCTTCACCCATGTCAACAAACCACCCTATGGAACTAAACCAGGTGGAACCAGGTGGTGAAGGCTTATCCTCAGGAAAAACCAGGTGGAGGTGGTGAAATAAAACCAGGTGGACCAGGTGGATAACCCTCGCCTCGCTTCTCAACCGAGACCTGGATAAACCAGGTGGGGTGGTCCACCGATTTTTGAGACACTAGAAACCAGGTGGGCGGGGAAACCAGGTGGCAAACCAGGTGGGGTGGACGGAAACCAGGTGGATATGTCATAAAACCAAACCAGGTGGTGCACCCCCATGGTGTGTCTTATCCGTGCGTATAAACCAGGTGGTCGCACGGCTTCCACTTGCTGAGAATAGGCCCGCAGGGTCAGTGCCATGCCCTCCGTCACTCGATATGTGTTGTAAGAGTGGTTACCCCTTCATTGAAGTCGCCCACAGCCCCACCTGCATTGCTAGACTATCACCCTACAGTAGGCCTTTTCGCCTTCTTCAAGCAGCAATCTCTTATCCGCGGATGGGCGCGGCGAGCGTGGCGTCCCCGAACATTTTTACCTAACGTGTTTTGTTGGCCGCAAGCCTTCCCTCTAGTCCACCTCAGCCATTCAGCCTAGTAGCTTTCAAGCCGAGCCTTCCATATCTAATGGACCGTCCAGAATTTCACACGTTTCACAGGGCTGTGTTCGACCGCCCGTAATGCTGTTTCACAGGCGATCGCCTTGCGGTTTTTTCACAGATCGCAGCCGATGGACATGCCAACTCGATTTTCACAGAGTTTTTCACAGCGGTTTCACAGCACAGCAGTGATTGTTTCACAGCAATTTTCACTTTCACAGGGGCCCTTTTCACAGCTCAGGGCTCTTTTCACTTTCACAGTTTCACAGCGCTCCTTTCACAGAGCGGGGAAATTTAAGGGAACACTCAAGGGAACAAGGGAACACACAAAGGGAACACAACACAACACATAAGGGAACACTTTCACAGAACACAAAAGTCCGAAATCATCAGCGGCGAAGGGATTTCACAGACAGACACTTTCACAGCGCATTTCACAGATACGTACTTTCACAGGCGTACTTTCACAGACTTTCACAGAGGACAAGCTCAATTTTCACAGACAGGCTGGATAAATTTCACAGCGGTAAGGGTTTCACAGCACACATAAGGGAACACGAATTTCACAGCAGGGAACACCTCTACGAGTAATCTATTACTCTACCTACTGAAGGGAACACACCGAAGACCTACTATTACCTATTACTCTTAAAGGGAACACATTACAAGGGAACACACTCTCTCGTCATATCTCACCTCTCTATTACTCTTAAGGGAACACCTTCTCGATCAACCTATTACTCTATGGAGATAGAGATATTCCAGACATATGGAGATAACATGGAGATATGGAGATAATGGAGATGGAGATAGCTCTTATATTTATCCTATGGAGATATGATACTATTAATGGAGATAATTCTAATGGAGATATAATTACTCTAAGAGGATGGGATCTCGGGCTATTACTCTAATGGAGATAAGCACTATTACTCTAGGAAATGGAGATATGTCAATGGAGATATGTAATGGAGATAGAGGGAGATGGAGTCGCCATTTCATAATCGCCATTTCATAGTTCAGGAATCGCCATTTCCGCCATTTCTAAGATGGAGTCGCCATTTCTACGTATGGAGATAGGATCGCCATTTCATACGACCCGTTGGATATCGCCATTTCCTCGCCATTTCTGGTGACATTTCTCGCCATTTCATTTCTGGAGATAGATGGATCTCGCCATTTCATAGGAATCGCCATTTCCACGTAGGGGGGGCCACAATCCGTAGGTCGGAATTCAGACTCGCCATTTCCCATCGCCATTTCTTCACCTGTATGCCGATCCCTTCGCCATTTCTCATGGAGATAACTCTCTCTCGCCATTTCTCGCCATTTCCATTTCACTCTCATTCGCCATCGCCATTTCCATTCGCCATTTCATCGCCATTTCTTCAGGATAAGATATCGCCATTTCGACTCTCATTCGCATACTGACTCTCATTCTCATCTCGCCATTTCTCATCTGACTCTCATCCTGGGGGAAACTTGCGACTCTCATCACACTTCCGTCGACTCTCATACTGGCGGATAGCATAGGAGCCATTTAAAGACTCTCATTCTCATTCGAGACTCTCATTCAAATCCTACGAGGACTCTCATATAGACTCTCATATCATTACGAGGACTCTCATATACGAGCCATGCATGTGGCGACGACTCTCATCTACGAGCCATGCAAGCAGAATCTACGAGCGACTCTCATTACGAGCCATGTGACCGTACGAGCCATGCATGCATGCCATGCTGACTCTCATCGAGTACGAGCCATGGAAGTTCTTGTTGGTTCGTAGCCCAAGAGCTGAAGTTACGAGCCTACGAGCCATGAAGTTACTTTTACGAGCCATGAAGCTTACGATACGAGCCATGCGAGCCATGCATCCGCGCTACGAGCCATGTTCCAGTACGAGCCATGTTAGTTGCTGAAGTTAAGTTTGGCGCTGAAGTTTGTACGAGCCATGTGCCCGCTGAAGTTTGTTGTACGAGCCATGCATGCTGAAGTTAATGGCTGAAGTTAGCGTTTGCGGGCAGATCCTCATTCTACGATACGAGCCATGCCATGCAGCTGAAGTTAAGTTGGGTTACGAGCCATGCGAGCCATGTGAAGTACGAGCCATGCTGGCTGAAGTTGTTTGTGCTGCTGAAGTTGCTCTTGTCTCTAGCTGAAGTTGCCAACAGGGCTGAAGCTGAAGTTTAAGCTGAAGTTGCGAGCAGGCTGAAGTTATCGGATTGGGGCTGAAGTTCAACCTCCCGTCCCCCCACACTATATTCCCGTCCCCCCCCGCGCACGCGCCGTCTCCCGTCCCCCCTATCCCGTGCGCACGCGACGCGATCCCGTCCCCCCAGAGTGCGCGCACGCGTCCCCCTTCCCGTCCCCCTCTCCCGGGCGCACGCGTCGCTCAACATTTCCGCGCACGCGTCGCGCACGCGGGCGCACGCGGGTCCCGTCCCCCCCCCTCTTCGGCGCACGCGGAATTCCCGTCGCGCACGCGTCCCGTCCCGCGCACGCGTCGCGCACGCGACTGCCCTAACCAACAGTGCGCACGCGCCGGTAACCCGGTAACCCGGTAACCGCGCACGCGGGCGCACGCGCGTAACCCGCGCACGCGCCGCGCACGCGGCCCGGTTCCCGTCCCCCCCGGTAACCCGGTAACTCCCGTCCCCCGTAACCCGGTGCGCACGCGCCCGGCGCACGCGGAGCGCACGCGCCCCCCCCGGTAATAGCGCACGCGCCCGGGCGCACGCGCCCGGTAACCCGGTAACCCGGGCGCGCGCACGCGGCGGCGCACGCGGCGCACGCGGCGCACGCG'
        k, l, t = 11, 566, 18
        output = 'AAACCAGGTGG'
        self.assertEqual(' '.join(clump_finding(genome, k, l, t)), output)

    def test_clump_finding_2(self):
        genome = 'CCCGGACTTCCCCAAAAGTCCAACAGGGCGAGAACCGATTCGTCTTAAATCAAAAAATCCAAAAAACAGAACCGTACCTCGGTTTTTCACAATGTACTCGGGTCTAACTATAGGTCCAAACCGTGTATTCATGTCGGTTAGTCCATCGTGATGTTTGGTTCACTGTCTGCACTGCCCGAATCCAGCGGGCCCCTCTTCCGTCACGCTAATGTACGGGGGACAGTCCCGTTGGCGCTTTTTTAGGACAGTCAGTGGGATTGGGCAGTGGGATCTAGCGCGAACCTGCCAGAAAAGACCTTGCAGACGCGTTCGTCCGAGGAGCCACTAAGATTGACACCATGGTGGGCCCTGATTGACCTGGATATCGAATGTAGCCTGATCTGACCTGATCTGAGCGGGCACTTTGAGCACTTAATTTTTGGCCGACGGTTCCCACGCACGTCACCCACGACACCCCACTTATACTTGCTGTCGCGCGTCGAGATGACTCTGCGGGCGGTGCACTCTGCGGCAAACTGTACGGAACAGAGAACCACTCCTTCTTCCAGCGCCGTAAGCCGTAGCCGTAAACCAAATATACCAAGCCGGGTGCCCCTGCAGAGGCACACATCTGTTGTACTCGAGACAACTCGAGACAACAGACAAACGACGCCACCGTGGGATATCACCCATACCACTAGGGATAAAAGGAGTTCCTGATCCACGAATCATGACAGTGTCCATTTGATTGTATAATTTAACTGGCAGGTTGCGCCGTTTGGCAACATGACCACTCCGACGATTTCCTAGGAAAAAGCTCCTGGCAGCCTGTTTGGGACTTTAGTATTTTTAACGGCCAAGGCACGTTAGTGTTGGATTAGCTCTTTCAGCATCCTGAGGTCGGGGATCATCGATGCCCCAGCAGATGTTACTCGTGGCGGGAAAAGAGCACTTACACAGCCGGGCAGCCTGTCCGAGACGGCTTGAACGCCAGAAAGGGACCGTGTTATACTTGAAAGAAGGTTATCAGAACAAAGCGTAGACATCGAGGGGTAGAGGTTCGGAGTGCTGGCGAGGCAACCGTGGAGGAAGCCTAGGGACTGGAAGCAAATCTAGCATTCTGCTCTTGTGGTGTCTCGGCATAGGTCATATCGCTGGCTAAATGTAGACGCCACGAAGATTCAAACTCACAAGGAATTAGTTCGTGACGTAAGCGCTTCTGGGCCTGTGAATTTTAGCGATTCGGACGAATATAGTTCGATTATCGCTTCCTCACTTCCGTCTCTGGGGCGTCGAACCGGCATCCCGCCTTACAGATGGTCCGCGAACGCAGTTGCCTGGGAGGCTTCTAGGCTTGAGGCTTCTAACCACCACTCATATTCTATAACCGAGGATAACATTTTTTGCTTCGAGTTTCGAGGTATAGTAATATAATATCGCTTTCAATATCGCTTAACATATAAAAGGGGCTATTGTCGTCGTAATTCCAGGTCGCGTTTGGTCGCGTTCCTCGTTGGAAAGTATCACGCAAATTTACCGTAGTTCAGGTTGCGAAGAAAGTCGTGACGATGTGAGCCGCCCGTTTAACAAAGGCTGAATCTGGAACCAAGTGTAGCTCCCCACTTATGACGTTAAGTTAAGGAGACGGGACCCCCTGATAAGTGTATCGCGTGATTTAAGCTTGTGAGACTACTCCCCGCAAACTTGGTGTTGGAGTAACTCATGACGCCGTAATCCTTTGCCTGCCCCCCGATGCGCAAAATGCGCAAAATGCGCAAAATGCGCAAAATGCGCAAAATGCGCAAA'
        k, l, t = 9, 29, 3
        output = 'ATGCGCAAA TGCGCAAAA GCGCAAAAT CGCAAAATG GCAAAATGC CAAAATGCG AAAATGCGC AAATGCGCA AATGCGCAA'
        self.assertEqual(' '.join(clump_finding(genome, k, l, t)), output)


if __name__ == '__main__':
    unittest.main()
